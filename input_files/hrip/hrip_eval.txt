CheML date="2016-01-21" time="16:30:29" version="1.2.0"

# Note: don't mix parameters and send&recv tokens in one line
# Note: don't make a short loop on only one function!
# Note: only one input per available legal input can be received
# Note: send: >> var id
# Note: recv: >> id var


## Input
                << host = cheml                 << function = ReadTable

                << filepath = 'benchmarks/RI_project/liq_org/pol_den_RI.csv'
                << header = 0
                << skiprows = 0
                << skipcolumns = 0
                >> df 0

## Input
                << host = cheml                 << function = Split
                << selection = ['Den_MD']
                >> 0 df   >> df1 1


## Input
                << host = cheml                 << function = ReadTable

                << filepath = 'RI_prep_NN_MACCS.out/results/y_predict_nn_psgd.csv'
                << header = None
                << skiprows = 0
                << skipcolumns = 0
                >> df 2

## Script
                        << host = cheml           << function = PyScript
                        << l0 = "print 'dfy:', df1.shape"
                        << l1 = "print 'dfy_pred:', df2.shape"
                        << l2 = "df_out1 = pd.DataFrame(df1.describe())"
                        << l3 = "print df_out1"
                        >> 1 df1  >> 2 df2 >> df_out1 7


## Divider
                        << host = sklearn             << function = Train_Test_Split
                        << test_size = 0.1             << train_size = None
                        << random_state = None          << stratify = None
                        >> 1 dfx   >> 2 dfy     > dfx_train 17  >> dfx_test 18  > dfy_train 19  >> dfy_test 20

## Script
                        << host = cheml           << function = PyScript
                        << l0 = "print '10% dfy:', df1.shape"
                        << l1 = "print '10% dfy_pred:', df2.shape"
                        >> 18 df1     >> 20 df2

## Postprocessor
                << host = sklearn      << function = Evaluate_static
                              << r2_score = True
                              << r2_sample_weight = None       << r2_multioutput = None

                              << mean_absolute_error = True
                              << mae_sample_weight = None       << mae_multioutput = "uniform_average"

                              << median_absolute_error = True

                              << mean_squared_error = True
                              << mse_sample_weight = None       << mse_multioutput = "uniform_average"

                              << root_mean_squared_error = True
                              << rmse_sample_weight = None       << rmse_multioutput = "uniform_average"

                              << explained_variance_score = True
                              << ev_sample_weight = None       << ev_multioutput = "uniform_average"

                > Note: can not pass multiple inputs
                >> 18 dfy     >> 20 dfy_pred   >> evaluation_results_ 3

## Script
                        << host = cheml           << function = PyScript
                        << l0 = "print 'eval_results:', df1.shape"
                        << l1 = "print 'results:', df1"
                        >> 3 df1

## Output
                << host = cheml                 << function = SaveFile

                << filename = 'eval_NN_results'
                << output_directory = 'eval'
                << record_time = False
                << format ='csv'
                << index = False
                << header = True
                >> 3 df

## Output
                << host = cheml                 << function = SaveFile

                << filename = 'dfy_describe'
                << output_directory = 'eval'
                << record_time = False
                << format ='csv'
                << index = True
                << header = True
                >> 7 df
