CheML date="2016-01-21" time="16:30:29" version="1.2.0"

# Note: don't mix parameters and send&recv tokens in one line
# Note: don't make a short loop on only one function!
# Note: only one input per available legal input can be received
# Note: send: >> var id
# Note: recv: >> id var


## Enter Data
                << host = pandas                 << function = read_table

                << filepath_or_buffer = 'benchmarks/RI_project/liq_org/pol_den_RI.csv'
                << sep=','
                << header = 0
                << skiprows = 0
                >> df 0

##
                << host = cheml                 << function = Split
                << selection = ['RI_LL']
                < selection = ['Pol_DFT']
                < selection = ['Den_MD']
                >> 0 df   >> df1 2


## Enter Data
                << host = pandas                 << function = read_table

                << filepath_or_buffer = '../../RI_project/liq_org/RI_HTT_bit.out/FP/HTT_bit.csv'
                < filepath_or_buffer = '../../RI_project/liq_org/RI_Morgan_bit.out/FP/Morgan_bit.csv'
                < filepath_or_buffer = '../../RI_project/liq_org/RI_HAP_bit.out/FP/HAP_bit.csv'
                < filepath_or_buffer = '../../RI_project/liq_org/RI_MACCS_bit.out/FP/MACCS_bit.csv'
                < filepath_or_buffer = '../../RI_project/liq_org/RI_dragon_1:7.out/dragon_csv/dragon_all.csv'
                < filepath_or_buffer = '../../RI_project/liq_org/RI_dragon_8:30.out/dragon_csv/dragon_all.csv'

                << sep=','
                << header = None
                << skiprows = 0
                >> df 1

## Script
                        << host = cheml           << function = PyScript
                        << l0 = "print 'df:', df1.shape"
                        << l1 = "print df1.columns"
                        < l2 = "print df1.describe()"
                        << l3 = "print 'df2:', df2.shape"
                        << l4 = "print df2.describe()"
                        >> 1 df1    >> 2 df2

## Preprocessor
                        << host = cheml             << function = MissingValues
                        << string_as_null = True    << missing_values = ['Nan']
                        << inf_as_null = True       << strategy = 'ignore_row'
                        >> 1 dfx >> 2 dfy  >> dfx 3  >> dfy 4

## Script
                        << host = cheml           << function = PyScript
                        << l0 = "print 'dfx:', df1.shape"
                        << l1 = "print 'dfy:', df2.shape"
                        < l2 = "print df1.describe()"
                        >> 3 df1 >> 4 df2



## Preprocessor
                        << host = cheml         << function = Constant
                        >> 3 df >> df 5 >> removed_columns_ 6

## Script
                        << host = cheml           << function = PyScript
                        << l0 = "print 'df1 after preprocess:', df1.shape"
                        < l1 = "print var1"
                        >> 5 df1   >> 6 var1

## Output
                << host = cheml                 << function = SaveFile

                << filename = 'constant_features'
                << output_directory = 'removed_features'
                << record_time = False
                << format ='csv'
                << index = False
                << header = False
                >> 6 df

## Divider
                        << host = sklearn             << function = Train_Test_Split
                        << test_size = 0.1             << train_size = None
                        << random_state = None          << stratify = None
                        >> 5 dfx   >> 4 dfy     >> dfx_train 17  >> dfx_test 18  >> dfy_train 19  >> dfy_test 20

## Script
                        << host = cheml           << function = PyScript
                        << l0 = "df_out1 = pd.DataFrame(df1.describe())"
                        << l1 = "df_out2 = pd.DataFrame(df2.describe())"
                        >> 19 df1   >> 20 df2  >> df_out1 27   >> df_out2 28
                        >> 17 var1  >> 18 var2

## Output
                << host = cheml                 << function = SaveFile

                << filename = 'y_train_describe_1:9'
                << output_directory = 'results'
                << record_time = False
                << format ='csv'
                << index = True
                << header = True
                >> 27 df

## Output
                << host = cheml                 << function = SaveFile

                << filename = 'y_test_describe_1:9'
                << output_directory = 'results'
                << record_time = False
                << format ='csv'
                << index = True
                << header = True
                >> 28 df

## Define Model
                        << host = sklearn        << function = SVR
                        << func_method = None   < method = 'fit', 'predict', None
                        << cache_size = 40000
                        > 17 dfx   > 19 dfy        >> api 101

## Script
                        << host = cheml           << function = PyScript
                        << l0 = "print var1"
                        >> 101 var1

## Define Search
                        << host = sklearn       << function = GridSearchCV
                              << estimator = '@estimator'
                              << param_grid = {'kernel':('linear', 'rbf', 'poly', 'sigmoid')} < , 'epsilon':(0.01,0.1,1,10), 'C':(0.1,1, 10), 'gamma':[0.1,1,'auto'], 'coef0':(0,0.1,1), 'degree':(2,3,4)}
                              << scoring = None
                              << fit_params = None
                              << n_jobs = 9
                              << pre_dispatch = '2*n_jobs'
                              << iid = True
                              << cv = None
                              << refit = True
                              << verbose = 0
                              << error_score = 'raise'
                              << return_train_score = True
                        >> 17 dfx  >> 19 dfy >> 101 estimator   > cv_results_ 102   > best_estimator_  103

# Define Model
                        << host = sklearn        << function = SVR
                        << func_method = 'predict'   < method = 'fit', 'predict', None
                        << cache_size = 40000
                        >> 18 dfx   > 19 dfy        >> 103 api  >> dfy_pred 104

# Script
                        << host = cheml           << function = PyScript
                        << l0 = "print var1"
                        >> 102 var1


# Regression
                        << host = cheml        << function = NN_PSGD
                                            << nneurons = [20,10]
                                            < nneurons = [128,64,32]
                                            << input_act_funcs = 'tanh'
                                            << validation_size = 0.1
                                            << learn_rate = 0.001
                                            << rms_decay = 0.9
                                            << n_epochs = 100000
                                            << batch_size = 256
                                            << n_cores = 16
                                            << n_hist = 20
                                            << n_check = 50
                                            << threshold = 0.1
                                            << print_level = 1
                        >> 17 dfx_train    >> 19 dfy_train   >> 18 dfx_test
                        >> dfy_train_pred 7    >> dfy_test_pred 9  > model 8


# Output
                << host = cheml                 << function = SaveFile

                << filename = 'y_train_predict_nn_psgd_1:9'
                << output_directory = 'results'
                << record_time = False
                << format ='csv'
                << index = False
                << header = False
                >> 7 df

# Output
                << host = cheml                 << function = SaveFile

                << filename = 'y_test_predict_nn_psgd_1:9'
                << output_directory = 'results'
                << record_time = False
                << format ='csv'
                << index = False
                << header = False
                >> 9 df

# Postprocessor
                << host = sklearn      << function = Evaluate_Regression
                              << r2_score = True
                              << r2_sample_weight = None       << r2_multioutput = None

                              << mean_absolute_error = True
                              << mae_sample_weight = None       << mae_multioutput = "uniform_average"

                              << median_absolute_error = True

                              << mean_squared_error = True
                              << mse_sample_weight = None       << mse_multioutput = "uniform_average"

                              << root_mean_squared_error = True
                              << rmse_sample_weight = None       << rmse_multioutput = "uniform_average"

                              << explained_variance_score = True
                              << ev_sample_weight = None       << ev_multioutput = "uniform_average"

                > Note: can not pass multiple inputs
                >> 20 dfy     >> 104 dfy_pred   >> evaluation_results_ 30

# Postprocessor
                << host = sklearn      << function = Evaluate_Regression
                              << r2_score = True
                              << r2_sample_weight = None       << r2_multioutput = None

                              << mean_absolute_error = True
                              << mae_sample_weight = None       << mae_multioutput = "uniform_average"

                              << median_absolute_error = True

                              << mean_squared_error = True
                              << mse_sample_weight = None       << mse_multioutput = "uniform_average"

                              << root_mean_squared_error = True
                              << rmse_sample_weight = None       << rmse_multioutput = "uniform_average"

                              << explained_variance_score = True
                              << ev_sample_weight = None       << ev_multioutput = "uniform_average"

                > Note: can not pass multiple inputs
                >> 19 dfy     >> 7 dfy_pred   >> evaluation_results_ 31

# Output
                << host = cheml                 << function = SaveFile

                << filename = 'eval_test_NN_1:9'
                << output_directory = 'results'
                << record_time = False
                << format ='csv'
                << index = False
                << header = True
                >> 30 df

# Output
                << host = cheml                 << function = SaveFile

                << filename = 'eval_train_NN_1:9'
                << output_directory = 'results'
                << record_time = False
                << format ='csv'
                << index = False
                << header = True
                >> 31 df

