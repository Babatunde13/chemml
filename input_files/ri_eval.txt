CheML date="2016-01-21" time="16:30:29" version="1.2.0"

# Note: don't mix parameters and send&recv tokens in one line
# Note: don't make a short loop on only one function!
# Note: only one input per available legal input can be received
# Note: send: >> var id
# Note: recv: >> id var


## Input
                << host = cheml                 << function = ReadTable

                << filepath = 'benchmarks/RI_project/liq_org/pol_den_RI.csv'
                << header = 0
                << skiprows = 0
                << skipcolumns = 0
                >> df 0

## Input
                << host = cheml                 << function = Split
                << selection = ['Den_MD']
                >> 0 df   >> df1 2


## Input
                << host = cheml                 << function = ReadTable

                << filepath = 'RI_MACCS_bit.out/FP/MACCS_bit.csv'
                << header = None
                << skiprows = 0
                << skipcolumns = 0
                >> df 1

## Script
                        << host = cheml           << function = PyScript
                        << l0 = "print 'df:', df1.shape"
                        << l1 = "print df1.columns"
                        < l2 = "print df1.describe()"
                        >> 1 df1

## Preprocessor
                        << host = cheml             << function = MissingValues
                        << string_as_null = True    << missing_values = ['Nan']
                        << inf_as_null = True       << strategy = 'ignore_row'
                        >> 1 dfx >> 2 dfy  >> dfx 3  >> dfy 4

## Script
                        << host = cheml           << function = PyScript
                        << l0 = "print 'dfx:', df1.shape"
                        << l1 = "print 'dfy:', df2.shape"
                        < l2 = "print df1.describe()"
                        >> 3 df1 >> 4 df2



## Preprocessor
                        << host = cheml         << function = Constant
                        >> 3 df >> df 5 >> removed_columns_ 6

## Script
                        << host = cheml           << function = PyScript
                        << l0 = "print 'df1 after preprocess:', df1.shape"
                        < l1 = "print var1"
                        >> 5 df1   >> 6 var1

## Output
                << host = cheml                 << function = SaveFile

                << filename = 'constant_features'
                << output_directory = 'removed_features'
                << record_time = False
                << format ='csv'
                << index = False
                << header = False
                >> 6 df

## Regression
                        << host = cheml        << function = NN_PSGD
                                            << nneurons = [20,10]
                                            << input_act_funcs = 'tanh'
                                            << validation_size = 0.2
                                            << learn_rate = 0.001
                                            << rms_decay = 0.9
                                            << n_epochs = 100000
                                            << batch_size = 256
                                            << n_cores = 16
                                            << n_hist = 20
                                            << n_check = 50
                                            << threshold = 0.1
                                            << print_level = 1
                        >> 5 dfx    >> 4 dfy    >> dfy_pred 7    >> model 8

## Script
                        << host = cheml           << function = PyScript
                        << l0 = "print 'pred:', var1"
                        << l2 = "print 'model:', var2"
                        >> 7 var1   >> 8 var2



## Output
                << host = cheml                 << function = SaveFile

                << filename = 'y_predict_nn_psgd'
                << output_directory = 'results'
                << record_time = False
                << format ='csv'
                << index = False
                << header = False
                >> 7 df




# Postprocessor
                << host = sklearn      << function = GridSearchCV

                              << estimator = '@estimator'
                              << param_grid = {'kernel':('linear', 'rbf','sigmoid'), 'C':[0.1,1], 'epsilon':[0.01,0.1], 'gamma':[0.01,0.1]}
                              << scoring = None         < 'degree':[2,3,4,5]
                              << fit_params = None
                              << n_jobs = 10
                              << pre_dispatch = '2*n_jobs'
                              << iid = True
                              << cv = None
                              << refit = True
                              << verbose = 0
                              << error_score = 'raise'
                              << return_train_score = True
                >> 8 dfx    >> 7 dfy    >> 11 estimator  >> cv_results_ 12    >> best_model_ 13     >> api 14

# Script
                        << host = cheml           << function = PyScript
                        << l0 = "print var1"
                        << l1 = "print '--------'"
                        < l2 = "print var3.best_estimator_"
                        << l3 = "print var3.best_score_"
                        << l4 = "print var3.best_params_"
                        << l5 = "print 'best model:', var2"
                        >> 12 var1    >> 13 var2  >> 14 var3

# Output
                << host = cheml                 << function = SaveFile

                << filename = 'G_SCV_SVR_results'
                << output_directory = 'SVR'
                << record_time = True
                << format ='csv'
                << index = False
                << header = True
                >> 12 df

# Divider
                        << host = sklearn             << function = Train_Test_Split
                        << test_size = 0.2             << train_size = None
                        << random_state = None          << stratify = None
                        >> 7 dfx   >> 3 dfy     > dfx_train 14  >> dfx_test 10  > dfy_train 15  >> dfy_test 11


# Preprocessor
                        << host = sklearn     << function = StandardScaler
                        << copy = True          << with_mean = True
                        << with_std = True
                        > df 1 > 2 df >> api  103

# Preprocessor
                        << host = sklearn     << function = MinMaxScaler
                        << feature_range = (0,1)    << copy = True
                        > df 1 > 2 df >> api  103
# Divider
                        << host = sklearn             << function = KFold
                        << n_splits = 3                 << shuffle = False
                        << random_state = 99
                        >> CV 106


# Postprocessor
                << host = sklearn      << function = Evaluation
                              << r2_score = True
                              << r2_sample_weight = None       << r2_multioutput = None

                              << mean_absolute_error = True
                              << mae_sample_weight = None       << mae_multioutput = "uniform_average"

                              << median_absolute_error = True

                              << mean_squared_error = True
                              << mse_sample_weight = None       << mse_multioutput = "uniform_average"

                              << root_mean_squared_error = True
                              << rmse_sample_weight = None       << rmse_multioutput = "uniform_average"

                              << explained_variance_score = True
                              << ev_sample_weight = None       << ev_multioutput = "uniform_average"

                > Note: can not pass multiple inputs
                >> 8 dfx     >> 7 dfy   > 106 CV  >> 11 model  > ? X_scaler   > ? Y_scaler   >> results 15


# Output
                << host = cheml                 << function = SaveFile

                << filename = 'svr_test_results'
                << output_directory = 'SVR'
                << record_time = False
                << format ='csv'
                << index = False
                << header = True
                >> 15 df
