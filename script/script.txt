CheML date="2016-01-21" time="16:30:29" version="1.1.0"

## INPUT
				%% data_path = 'benchmarks/homo_dump/sample_50/data_NOsmi_50.csv'
				%% data_delimiter = None
				%% data_header = 0
				%% data_skiprows = 0
				%% target_path = 'benchmarks/homo_dump/sample_50/homo_50.csv'
				%% target_delimiter = None
				%% target_header = None
				%% target_skiprows = 0

## OUTPUT               %% path = 'CheML.out'
						%% filename_pyscript = 'CheML_PyScript.py'
						%% filename_logfile = 'log.txt'
						%% filename_errorfile = 'error.txt'

## MISSING_VALUES       %% string_as_null = True    %% missing_values = False
                        %% inf_as_null = True       %% strategy = 'mean'

## StandardScaler       %% copy = True      %% with_mean = True     
                        %% with_std = True

## MinMaxScaler         %% feature_range = (0,1)    %% copy = True

## MaxAbsScaler         %% copy = True

## RobustScaler         %% with_centering = True    %% with_scaling = True      
                        %% copy = True

## Normalizer           %% norm = 'l2'  %% copy = True

## Binarizer            %% threshold = 0.0      %% copy = True

## OneHotEncoder        %% n_values = 'auto'    %% categorical_features = 'all'
                        %% dtype = np.float   %% sparse = True
                        %% handle_unknown = 'error'

## PolynomialFeatures   %% degree = 2   %% interaction_only = False
                        %% include_bias = True

## FunctionTransformer  %% func = None              %% validate = True
                        %% accept_sparse = False    %% pass_y = False

## VarianceThreshold    %% threshold = 0.0

## SelectKBest          %% score_func = f_regression    %% k = 10

## SelectPercentile     %% score_func = f_regression
                        %% percentile = 10

## SelectFpr            %% score_func = f_regression
                        %% alpha = 0.05

## SelectFdr            %% score_func = f_regression
                        %% alpha = 0.05

## SelectFwe            %% score_func = f_regression
                        %% alpha = 0.05

## RFE                  %% estimator = sklearn.sth.fake1__a = 1__b=True__c='mean'__d = ['r',1]       
                        %% n_features_to_select = None
                        %% step = 1             %% estimator_params = None
                        %% verbose = 0

## RFECV                %% estimator = sklearn.sth.fake2__a = 1__b=True__c='mean'__d = ['r',1]       
                        %% step = 1             %% cv = None            
                        %% scoring = None       %% estimator_params = None
                        %% verbose = 0

## SelectFromModel      %% estimator = sklearn.sth.fake3__a = 1__b=True__c='mean'__d = ['r',1]       
                        %% threshold = None     %% prefit = True

## Trimmer              %% type="margins"       %% sort = True       
                        %% cut = 0.05           %% shuffle = True

## Uniformer            %% bins =         %% bin_pop = 0.5      %% right = True     
                        %% include_lowest = True        %% substitute = None

## PCA                  %% n_components = None        %% copy = True       
                        %% whiten = False

## KernelPCA            %% n_components=None    %% kernel="linear"     
                        %% degree=3             %% gamma=None                    
                        %% coef0=1              %% kernel_params=None   
                        %% alpha=1.0            %% fit_inverse_transform=False  
                        %% eigen_solver='auto'  %% tol=0                         
                        %% max_iter=None        %% remove_zero_eig=True        

## RandomizedPCA        %% n_components = None  %% iterated_power = 3    
                        %% copy = True          %% whiten = False
                        %% random_state = None

## LDA                  %% solver = 'svd'               %% shrinkage = None     
                        %% priors = None                %% n_components = None                    
                        %% store_covariance = False     %% tol = 0.0001

### SupervisedLearning_regression  

	## split               %% module = 'sklearn'       %% method = 'train_test_split'
											%% test_size = None         
											%% train_size = None    
											%% random_state = None      
											%% stratify = None
    
    ## cross_validation    %% module = 'sklearn'       %% method = 'K-fold'
                                            %% n = len(data)    
											%% n_folds = 3  
											%% shuffle = False
											%% random_state = None

    # cross_validation    %% module = 'sklearn'       %% method = 'StratifiedKFold'
                                            %% y = target    
											%% n_folds = 3  
											%% shuffle = False
											%% random_state = None

    # cross_validation    %% module = 'sklearn'       %% method = 'LabelKFold'
                                            %% labels = target    
											%% n_folds = 3  

    # cross_validation    %% module = 'sklearn'       %% method = 'LeaveOneOut'
                                            %% n = len(data)    

    # cross_validation    %% module = 'sklearn'       %% method = 'LeavePOut'
                                            %% n = len(data) 
                                            %% p = 5   

    # cross_validation    %% module = 'sklearn'       %% method = 'LeaveOneLabelOut'
                                            %% labels = target    

    # cross_validation    %% module = 'sklearn'       %% method = 'LeavePLabelOut'
                                            %% labels = target   
                                            %% p = 5

    # cross_validation    %% module = 'sklearn'       %% method = 'ShuffleSplit'
                                            %% n = len(data)
                                            %% n_iter = 10    
											%% test_size = 0.1         
											%% train_size = None    
											%% random_state = None      

    # cross_validation    %% module = 'sklearn'       %% method = 'LabelShuffleSplit'
                                            %% labels = target   
                                            %% n_iter = 10    
											%% test_size = 0.1         
											%% train_size = None    
											%% random_state = None                               

    # cross_validation     %% module = 'sklearn'       %% method = 'PredefinedSplit'
                                            %% test_fold = [0, 1, -1, 1, 2, ...]   
    
    ## scaler               %% module = 'sklearn'       %% method = 'StandardScaler'       
                                            %% copy = True      
                                            %% with_mean = True     
    	                    				%% with_std = True

	# scaler               %% module = 'sklearn'       %% method = 'MinMaxScaler'         
											%% feature_range = (0,1)    
											%% copy = True

	# scaler               %% module = 'sklearn'       %% method = 'MaxAbsScaler'
									        %% copy = True

	# scaler               %% module = 'sklearn'       %% method = 'RobustScaler'         
											%% with_centering = True    
											%% with_scaling = True      
    	                    				%% copy = True

	# scaler               %% module = 'sklearn'       %% method = 'Normalizer'           
											%% norm = 'l2'  
											%% copy = True
    
    # learner               %% module = 'sklearn'         %% method = 'LinearRegression'
											%% fit_intercept = True
											%% normalize = False
											%% copy_X = True
											%% n_jobs = 1  

    # learner               %% module = 'sklearn'         %% method = 'Ridge'
											%% alpha = 1.0
											%% copy_X = True
											%% fit_intercept = True
											%% max_iter = None
											%% normalize = False
											%% tol = 0.001 
											%% solver = 'auto'
											%% random_state = None

    # learner               %% module = 'sklearn'         %% method = 'Lasso'
											%% alpha = 1.0
											%% fit_intercept = True
											%% normalize = False
											%% precompute = False
											%% copy_X = True
											%% max_iter = 1000
											%% tol = 0.0001 
											%% warm_start = False
											%% positive = False
											%% random_state = None
											%% selection='cyclic'

    # learner               %% module = 'sklearn'         %% method = 'ElasticNet'
											%% alpha = 1.0
											%% l1_ratio = 0.5
											%% fit_intercept = True
											%% normalize = False
											%% precompute = False
											%% copy_X = True
											%% max_iter = 1000
											%% tol = 0.0001 
											%% warm_start = False
											%% positive = False
											%% random_state = None
											%% selection='cyclic'

    ## learner               %% module = 'sklearn'         %% method = 'LassoLars'
											%% alpha = 1.0
											%% verbose = False
											%% fit_intercept = True
											%% normalize = True
											%% precompute = 'auto'
											%% copy_X = True
											%% max_iter = 500
											%% eps=np.finfo(np.float).eps
											%% fit_path = True
											%% positive = False

    ## learner               %% module = 'sklearn'         %% method = 'SVR'
											%% kernel = 'rbf'
											%% degree = 3
											%% gamma = 'auto'
											%% coef0 = 0.0
											%% tol = 1e-3 
											%% C = 1.0
											%% epsilon = 0.1 
											%% shrinking = True
											%% cache_size = 200
											%% verbose = False 
											%% max_iter = -1
                                    
    ## metrics                              %% r2_score = True
                                            %% mean_absolute_error = True
                                            %% median_absolute_error = True
                                            %% mean_squared_error = True
                                            %% root_mean_squared_error = True
                                            %% explained_variance_score = True
    
    # plot                  %% module = cheml           %% method = '2d'    
             								%% x = 
                                            %% y = 
                                            
    # save                %% which_params = [ ]
###
























