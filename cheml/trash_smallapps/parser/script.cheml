CheML date="2016-01-21" time="16:30:29" version="1.1.0"

## RFE                  
                        %% estimator = sklearn.sth.fake1__a = 1__b=True__c='mean'__d = ['r',1]       
                        %% n_features_to_select = None
                        
                        %% step = 1             %% estimator_params = None
                        %% verbose = 0

# RFECV                 
                        %% estimator = ''       %% step = 1
                        %% cv = None            %% scoring = None
                        %% estimator_params = None
                        %% verbose = 0

### SupervisedLearning_regression  

    # split               %% from = sklearn       %% method = 'train_test_split'
											%% test_size = None         
											%% train_size = None    
											%% random_state = None      
											%% stratify = None
    
    ## cross_validation    %% from = sklearn       %% method = 'K-fold'    
											%% n_folds = 3  
											%% shuffle = False
											%% random_state = None

    ## learner             %% from = sklearn       %% method = 'LinearRegression'
											%% fit_intercept = True
											%% normalize = False
											%% copy_X = True 
                                    
    ## metrics             %% from = sklearn       %% method = 'mean_absolute_error'
    
    ## plot                %% method = '2d'    %% x = 
                                                %% y = 
    ## save                %% which_params = [ ]
###


## LDA                  %% solver = 'svd'               %% shrinkage = None     
                        %% priors = None                %% n_components = None                    
                        %% store_covariance = False     %% tol = 0.0001


### SupervisedLearning_regression  

    # split               %% from = sklearn       %% method = 'train_test_split'
											%% test_size = None         
											%% train_size = None    
											%% random_state = None      
											%% stratify = None
    
    ## cross_validation    %% from = sklearn       % method = 'K-fold'    
											% n_folds = 3  
											%% shuffle = False
											%% random_state = None

###

## PCA                  %% n_components = None        %% copy = True       
                        %% whiten = False
